/* Where it all begins. */

/* Adding reset styles... */
*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

/* Did you know about variables in CSS? */
/* It's an basic-advance topic in CSS, but I know how to use it. */
/* I think we need to create variables in HTML element. */
/* No, no! Actually, it's by :root. */
/* html { */
    /* Declaring a variable by using double (--) and the word. */
    /* --primary-bgcolor: #fff; */
/* } */
:root {
    /* Dark Background Color for 'hero' and 'footer'. */
    --bg-color: #1f2937;
    /* Hero main and header logo text. */
    --h1-header-color-text: #f9faf8;
    /* Hero secondary text. Quote section background, probably. */
    --hero-text: #e5e7eb;
    /* Button color for sign-up and other stuff... */
    --button-color: #3882f6;
    /* Information header text. And quote text. */
    --information-header: #1f2937;
    /* For those anchors who want to be independent. */
    --anchors-text: #fff;
}

/* The HTML rule. */
html {
    /* Roboto family with "sans-serif" as a fallback. */
    font-family: Roboto, sans-serif;
    /* By default, font-size: 16px is in Chrome. Let's change! */
    /* font-size: 16px; */
    font-size: 20px;
}

/* First for all, let's change specific layouts inside of the container. */

/* Header: */
.header {
    /* Let's use "var()" function. */
    /* Put inside of it the variable value with (--) */
    background-color: var(--bg-color);
    /* Use the color property with variables: */
    color: var(--h1-header-color-text);
    /* Let's add space between the content and the border. */
    padding: 5px 130px 150px;
}

/* Header-top, and it's inside from .header. */
.header-top {
    /* Let's organize our container with "align-items" and it controls the cross-axis. */
    align-items: center;
    /* Let's use display: flex. */
    display: flex;
    /* Use font-size to maximize the font. */
    font-size: 24px;
    /* We could use font-weight set to bold. */
    /* No, no. Actually not. */
    /* font-weight: bold; */
    /* Use "justify-content" to organize your container in main-axis. */
    /* I know some people don't like 'space-around', but I will give it an opportunity. */
    justify-content: space-around;
    /* You too, adding some space. */
    padding-bottom: 110px;
}

/* .header-links is actually our "ul" element. */
.header-links {
    /* Always put the align-items to the center. */
    align-items: center;
    /* Let's make this unordered list into Flex. */
    display: flex;
    /* Remove those disc over there! */
    list-style: none;
    /* Justify content set to center. */
    justify-content: center;
    /* The gap is space between elements in flex container. */
    gap: 25px;
}

/* Our anchor elements: */
.header-links li a {
    /* The background-color using the button-color variable value. */
    background-color: var(--button-color);
    /* Use border simulating a button. */
    border: 2px outset black;
    /* The color is using a variable. We need to add other one. */
    color: var(--anchors-text);
    /* By default, anchor elements has display: block; */
    display: block;
    /* Adding padding space, because it's a button. */
    padding: 10px;
    /* In order to remove your underline, use text-decoration set to none. */
    text-decoration: none;
}

/* The .header-bottom: */
.header-bottom {
    /* Probably this one repeats, repeats... */
    display: flex;
    /* Change the main-axis to column direction now! */
    /* Now, we want to make it as a row. */
    flex-direction: row;
    /* Wrapping things, try it. */
    flex-wrap: wrap;
    /* Justify-content in the main axis. */
    justify-content: space-between;
    /* Add a padding, just because! */
    padding: 30px;
}

/* The .header-bottom h1 element selector */
.header-bottom h1 {
    /* The font-size must be 48px: */
    font-size: 48px;
    /* The font-weight must be extra-bold or probably 900 as value: */
    font-weight: 900;
}

/* The new div in action: */
.header-bottom div {
    /* Let's use flex-container again from here. */
    display: flex;
    /* Change the direction of the main-axis. */
    flex-direction: column;
    /* We could use the flex-basis for the flex-item. */
    flex-basis: 50%;
    /* Justify the content to the center. */
    justify-content: center;
    /* Space between those items, using gap property. */
    gap: 20px;
}

/* Modifying the img element. */
.header-img {
    /* Border-radius, because we want more circle. */
    border-radius: 50%;
    /* By default, img element is inline-level. */
    display: block;
    /* Height auto, just because. */
    height: auto;
    /* This is randomly I picked up. */
    /* We optimized the speed over quality. */
    image-rendering: optimizeSpeed;
    /* This isn't real, but well 400px. */
    width: 400px;
}

/* This header-button has repeated... But, well. This is special one in the header-bottom. */
.header-button {
    /* The background-color using the button-color variable value. */
    background-color: var(--button-color);
    /* Use border simulating a button. */
    border: 1px outset black;
    /* The color is using a variable. We need to add other one. */
    color: var(--anchors-text);
    /* By default, anchor elements has display: block; */
    display: block;
    /* Font-weight in action set to bold: */
    font-weight: bold;
    /* Adding padding space, because it's a button. */
    padding: 15px;
    /* Hey, you copy and paste... */
    /* In order to remove your underline, use text-decoration set to none. */
    text-decoration: none;
    /* This is new, adding a width: */
    /* I like the "fit-content" now. */
    width: fit-content;
}

/* THE MAIN CONTENT */
/* The first section (information): */
/* Pseudo-class in action! The first child of its parent. */
.information:first-child {
    padding: 50px 25px;
}

/* The information-title here: */
.information-title {
    text-align: center;
}

/* Images of the first section: */
.information div img {
    /* Adding border-radius. */
    border-radius: 10px;
    /* The box-shadow is important to use. */
    /* The first value is for "x", the second one is "y", the third one is for "blur", and the last one is for the color. */
    box-shadow: 2px 2px 5px var(--bg-color);
    /* Remember that the display: inline is by default for the img. */
    display: block;
    /* Height auto and width with those proportions. Randomly picked. */
    height: auto;
    /* And you are the margin set to auto. */
    margin: auto;
    /* You are the width. */
    width: 250px;
}

/* Now we are going to change those figure and figcaption. */
.information-fig {
    /* We need to put them all like stretch. */
    align-items: stretch;
    /* The flexbox container is here. */
    display: flex;
    /* Justify those contents space-evenly. */
    justify-content: space-evenly;
}

.information-img {
    flex-basis: 100%;
    text-align: center;
}